import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import io.smallrye.mutiny.Uni;
import org.arobase.infrastructure.dto.LoginCredentialsDTO;
import org.arobase.infrastructure.dto.TokensDTO;
import org.arobase.infrastructure.persistance.entity.Account;
import org.arobase.infrastructure.persistance.repository.AccountRepository;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.transaction.Transactional;
import javax.ws.rs.core.Response;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@QuarkusTest
public class AuthServiceIntegrationTest {

    @InjectMock
    AccountRepository accountRepository;

    @InjectMock
    HashedPasswordService hashedPasswordService;

    @InjectMock
    TokenManagementService tokenManagementService;

    @InjectMock
    AuthService authService;

    @Test
    @Transactional
    void testLogin_Successful() {
        // Given
        String mail = "test@example.com";
        String password = "password123";
        String accessToken = "accessToken";
        String refreshToken = "refreshToken";
        LoginCredentialsDTO loginCredentials = new LoginCredentialsDTO(mail, password);
        Account account = new Account(mail, password, accessToken, refreshToken);

        // Stubbing behavior
        when(accountRepository.find("mail", mail)).thenReturn(Uni.createFrom().item(account));
        when(hashedPasswordService.verifyPassword(password, account.getPassword())).thenReturn(true);
        when(tokenManagementService.getTokens(mail)).thenReturn(new TokensDTO(accessToken, refreshToken));
        when(accountRepository.persistAndFlush(account)).thenReturn(Uni.createFrom().item(account));

        // When
        Account loggedInAccount = authService.login(loginCredentials).await().indefinitely();

        // Then
        assertEquals(accessToken, loggedInAccount.getAccessToken());
        assertEquals(refreshToken, loggedInAccount.getRefreshToken());
    }

    @Test
    @Transactional
    void testLogin_AccountNotFound() {
        // Given
        String mail = "test@example.com";
        String password = "password123";
        LoginCredentialsDTO loginCredentials = new LoginCredentialsDTO(mail, password);

        // Stubbing behavior
        when(accountRepository.find("mail", mail)).thenReturn(Uni.createFrom().nullItem());

        // When/Then
        assertThrows(AuthenticationException.class, () -> authService.login(loginCredentials).await().indefinitely());
    }
}
